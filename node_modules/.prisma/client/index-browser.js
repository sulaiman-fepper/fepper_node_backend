
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.3.0
 * Query Engine version: e90b936d84779543cbe0e494bc8b9d7337fad8e4
 */
Prisma.prismaVersion = {
  client: "5.3.0",
  engine: "e90b936d84779543cbe0e494bc8b9d7337fad8e4"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  email_verified_at: 'email_verified_at',
  password: 'password',
  remember_token: 'remember_token',
  created_at: 'created_at',
  updated_at: 'updated_at',
  auth_token: 'auth_token',
  phone: 'phone',
  default_address_id: 'default_address_id',
  delivery_pin: 'delivery_pin',
  delivery_guy_detail_id: 'delivery_guy_detail_id',
  avatar: 'avatar',
  is_active: 'is_active',
  tax_number: 'tax_number',
  user_ip: 'user_ip'
};

exports.Prisma.Delivery_guy_detailsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  age: 'age',
  gender: 'gender',
  photo: 'photo',
  description: 'description',
  vehicle_number: 'vehicle_number',
  created_at: 'created_at',
  updated_at: 'updated_at',
  commision_rate: 'commision_rate',
  is_notifiable: 'is_notifiable',
  max_accept_delivery_limit: 'max_accept_delivery_limit',
  delivery_lat: 'delivery_lat',
  delivery_long: 'delivery_long',
  heading: 'heading',
  tip_commision_rate: 'tip_commision_rate',
  status: 'status'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  address: 'address',
  house: 'house',
  landmark: 'landmark',
  tag: 'tag',
  created_at: 'created_at',
  updated_at: 'updated_at',
  latitude: 'latitude',
  longitude: 'longitude'
};

exports.Prisma.Accept_deliveriesScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  user_id: 'user_id',
  customer_id: 'customer_id',
  is_complete: 'is_complete',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.OrdersScalarFieldEnum = {
  id: 'id',
  unique_order_id: 'unique_order_id',
  orderstatus_id: 'orderstatus_id',
  user_id: 'user_id',
  coupon_name: 'coupon_name',
  location: 'location',
  address: 'address',
  tax: 'tax',
  restaurant_charge: 'restaurant_charge',
  delivery_charge: 'delivery_charge',
  total: 'total',
  created_at: 'created_at',
  updated_at: 'updated_at',
  payment_mode: 'payment_mode',
  order_comment: 'order_comment',
  restaurant_id: 'restaurant_id',
  transaction_id: 'transaction_id',
  delivery_type: 'delivery_type',
  payable: 'payable',
  wallet_amount: 'wallet_amount',
  tip_amount: 'tip_amount',
  tax_amount: 'tax_amount',
  coupon_amount: 'coupon_amount',
  coupon_isrestaurant: 'coupon_isrestaurant',
  sub_total: 'sub_total',
  cash_change_amount: 'cash_change_amount',
  restaurant_tax: 'restaurant_tax',
  online_payment_status: 'online_payment_status',
  rain_charge: 'rain_charge',
  extra_charge: 'extra_charge',
  extra_title: 'extra_title'
};

exports.Prisma.OrderstatusesScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.RestaurantsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  location_id: 'location_id',
  image: 'image',
  rating: 'rating',
  delivery_time: 'delivery_time',
  price_range: 'price_range',
  is_pureveg: 'is_pureveg',
  created_at: 'created_at',
  updated_at: 'updated_at',
  slug: 'slug',
  placeholder_image: 'placeholder_image',
  latitude: 'latitude',
  longitude: 'longitude',
  certificate: 'certificate',
  restaurant_charge: 'restaurant_charge',
  delivery_charges: 'delivery_charges',
  address: 'address',
  pincode: 'pincode',
  landmark: 'landmark',
  sku: 'sku',
  is_active: 'is_active',
  is_accepted: 'is_accepted',
  is_feature: 'is_feature',
  commission_rate: 'commission_rate',
  delivery_type: 'delivery_type',
  delivery_radius: 'delivery_radius',
  delivery_charge_type: 'delivery_charge_type',
  base_delivery_charge: 'base_delivery_charge',
  base_delivery_distance: 'base_delivery_distance',
  extra_delivery_charge: 'extra_delivery_charge',
  extra_delivery_distance: 'extra_delivery_distance',
  min_order_price: 'min_order_price',
  is_notifiable: 'is_notifiable',
  auto_acceptable: 'auto_acceptable',
  schedule_data: 'schedule_data',
  is_schedulable: 'is_schedulable',
  order_column: 'order_column',
  custom_message: 'custom_message',
  is_orderschedulling: 'is_orderschedulling'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  payable_type: 'payable_type',
  payable_id: 'payable_id',
  wallet_id: 'wallet_id',
  type: 'type',
  amount: 'amount',
  confirmed: 'confirmed',
  meta: 'meta',
  uuid: 'uuid',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.AddonsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  price: 'price',
  addon_category_id: 'addon_category_id',
  user_id: 'user_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  is_active: 'is_active'
};

exports.Prisma.Addon_categoriesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  user_id: 'user_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  description: 'description',
  addon_limit: 'addon_limit'
};

exports.Prisma.Addon_category_itemScalarFieldEnum = {
  id: 'id',
  addon_category_id: 'addon_category_id',
  item_id: 'item_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ItemsScalarFieldEnum = {
  id: 'id',
  restaurant_id: 'restaurant_id',
  item_category_id: 'item_category_id',
  name: 'name',
  price: 'price',
  old_price: 'old_price',
  image: 'image',
  is_recommended: 'is_recommended',
  is_popular: 'is_popular',
  is_new: 'is_new',
  created_at: 'created_at',
  updated_at: 'updated_at',
  desc: 'desc',
  placeholder_image: 'placeholder_image',
  is_active: 'is_active',
  is_veg: 'is_veg',
  order_column: 'order_column'
};

exports.Prisma.AlertsScalarFieldEnum = {
  id: 'id',
  data: 'data',
  user_id: 'user_id',
  is_read: 'is_read',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.BranchScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  is_franchise: 'is_franchise',
  is_active: 'is_active',
  restaurant_id: 'restaurant_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CouponsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  code: 'code',
  success_count: 'success_count',
  success_amount: 'success_amount',
  discount_type: 'discount_type',
  discount: 'discount',
  expiry_date: 'expiry_date',
  is_active: 'is_active',
  is_restaurant: 'is_restaurant',
  created_at: 'created_at',
  updated_at: 'updated_at',
  restaurant_id: 'restaurant_id',
  count: 'count',
  max_count: 'max_count',
  min_subtotal: 'min_subtotal',
  max_discount: 'max_discount',
  subtotal_message: 'subtotal_message',
  user_type: 'user_type',
  max_count_per_user: 'max_count_per_user'
};

exports.Prisma.Coupon_restaurantScalarFieldEnum = {
  id: 'id',
  coupon_id: 'coupon_id',
  restaurant_id: 'restaurant_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Delivery_collectionsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  amount: 'amount',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Delivery_collection_logsScalarFieldEnum = {
  id: 'id',
  delivery_collection_id: 'delivery_collection_id',
  amount: 'amount',
  type: 'type',
  message: 'message',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.FavoritesScalarFieldEnum = {
  user_id: 'user_id',
  favoriteable_type: 'favoriteable_type',
  favoriteable_id: 'favoriteable_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.IncentivesScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  delivery_guy_detail_id: 'delivery_guy_detail_id',
  total_order: 'total_order',
  delivery_charge: 'delivery_charge',
  extra_delivery_charge: 'extra_delivery_charge',
  delivery_tip: 'delivery_tip',
  incentive: 'incentive',
  extra_amount: 'extra_amount',
  total_amount: 'total_amount',
  incentive_date: 'incentive_date',
  created_at: 'created_at',
  updated_at: 'updated_at',
  extra_surge: 'extra_surge'
};

exports.Prisma.Item_categoriesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  is_enabled: 'is_enabled',
  created_at: 'created_at',
  updated_at: 'updated_at',
  user_id: 'user_id',
  order_column: 'order_column'
};

exports.Prisma.OrderitemsScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  item_id: 'item_id',
  name: 'name',
  quantity: 'quantity',
  price: 'price',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Order_item_addonsScalarFieldEnum = {
  id: 'id',
  orderitem_id: 'orderitem_id',
  addon_category_name: 'addon_category_name',
  addon_name: 'addon_name',
  addon_price: 'addon_price',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PagesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  body: 'body',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Promo_slidersScalarFieldEnum = {
  id: 'id',
  name: 'name',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at',
  location_id: 'location_id',
  position_id: 'position_id',
  size: 'size'
};

exports.Prisma.Push_tokensScalarFieldEnum = {
  id: 'id',
  token: 'token',
  status: 'status',
  is_sent: 'is_sent',
  is_active: 'is_active',
  user_id: 'user_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.RatingsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  order_id: 'order_id',
  restaurant_id: 'restaurant_id',
  delivery_id: 'delivery_id',
  rating_store: 'rating_store',
  rating_delivery: 'rating_delivery',
  review_store: 'review_store',
  review_delivery: 'review_delivery',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ReferralsScalarFieldEnum = {
  id: 'id',
  referral_code: 'referral_code',
  refer_from: 'refer_from',
  refer_to: 'refer_to',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Restaurant_categoriesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Restaurant_category_restaurantScalarFieldEnum = {
  id: 'id',
  restaurant_category_id: 'restaurant_category_id',
  restaurant_id: 'restaurant_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Restaurant_category_slidersScalarFieldEnum = {
  id: 'id',
  name: 'name',
  image: 'image',
  image_placeholder: 'image_placeholder',
  categories_ids: 'categories_ids',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at',
  order_column: 'order_column'
};

exports.Prisma.Restaurant_earningsScalarFieldEnum = {
  id: 'id',
  restaurant_id: 'restaurant_id',
  user_id: 'user_id',
  amount: 'amount',
  extra: 'extra',
  is_requested: 'is_requested',
  is_processed: 'is_processed',
  created_at: 'created_at',
  updated_at: 'updated_at',
  restaurant_payout_id: 'restaurant_payout_id'
};

exports.Prisma.Restaurant_payoutsScalarFieldEnum = {
  id: 'id',
  restaurant_id: 'restaurant_id',
  restaurant_earning_id: 'restaurant_earning_id',
  amount: 'amount',
  status: 'status',
  transaction_mode: 'transaction_mode',
  transaction_id: 'transaction_id',
  message: 'message',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Restaurant_userScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  restaurant_id: 'restaurant_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.RolesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  guard_name: 'guard_name',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SettingsScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value'
};

exports.Prisma.SlidesScalarFieldEnum = {
  id: 'id',
  promo_slider_id: 'promo_slider_id',
  unique_id: 'unique_id',
  name: 'name',
  image: 'image',
  image_placeholder: 'image_placeholder',
  url: 'url',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at',
  order_column: 'order_column',
  model: 'model',
  item_id: 'item_id',
  restaurant_id: 'restaurant_id',
  is_locationset: 'is_locationset',
  latitude: 'latitude',
  longitude: 'longitude',
  radius: 'radius'
};

exports.Prisma.TransactionsScalarFieldEnum = {
  id: 'id',
  payable_type: 'payable_type',
  payable_id: 'payable_id',
  wallet_id: 'wallet_id',
  type: 'type',
  amount: 'amount',
  confirmed: 'confirmed',
  meta: 'meta',
  uuid: 'uuid',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.WalletsScalarFieldEnum = {
  id: 'id',
  holder_type: 'holder_type',
  holder_id: 'holder_id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  balance: 'balance',
  decimal_places: 'decimal_places',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.type = exports.$Enums.type = {
  deposit: 'deposit',
  withdraw: 'withdraw'
};

exports.Prisma.ModelName = {
  Users: 'Users',
  Delivery_guy_details: 'Delivery_guy_details',
  Address: 'Address',
  Accept_deliveries: 'Accept_deliveries',
  Orders: 'Orders',
  Orderstatuses: 'Orderstatuses',
  Restaurants: 'Restaurants',
  Transaction: 'Transaction',
  Addons: 'Addons',
  Addon_categories: 'Addon_categories',
  Addon_category_item: 'Addon_category_item',
  Items: 'Items',
  Alerts: 'Alerts',
  Branch: 'Branch',
  Coupons: 'Coupons',
  Coupon_restaurant: 'Coupon_restaurant',
  Delivery_collections: 'Delivery_collections',
  Delivery_collection_logs: 'Delivery_collection_logs',
  favorites: 'favorites',
  Incentives: 'Incentives',
  item_categories: 'item_categories',
  Orderitems: 'Orderitems',
  Order_item_addons: 'Order_item_addons',
  Pages: 'Pages',
  Promo_sliders: 'Promo_sliders',
  Push_tokens: 'Push_tokens',
  Ratings: 'Ratings',
  Referrals: 'Referrals',
  Restaurant_categories: 'Restaurant_categories',
  Restaurant_category_restaurant: 'Restaurant_category_restaurant',
  Restaurant_category_sliders: 'Restaurant_category_sliders',
  Restaurant_earnings: 'Restaurant_earnings',
  Restaurant_payouts: 'Restaurant_payouts',
  Restaurant_user: 'Restaurant_user',
  Roles: 'Roles',
  Settings: 'Settings',
  Slides: 'Slides',
  Transactions: 'Transactions',
  Wallets: 'Wallets'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
